1. 내장함수
  1) 숫자함수
    ABS(숫자) : 절대값
    CEIL(숫자) :  숫자보다 크거나 같은 최소의 정수
      SELECT CEIL((20.574*100)/100);
    FLOOR(숫자) : 숫자보다 작거나 같은 최소의 정수
    ROUND(숫자,m) : 숫자의 반올림, M은 반올림 기준 자릿수
      SELECT ROUND(4.875,1);
    LOG(N,숫자) :  숫자의 자연로그 값을 반환
    POWER(숫자,N) : 숫자의 N 제곱 값을 계산
    SQRT(숫자) : 제곱근
    SIGN(숫자) : 양수(1),음수(-1),0

    4-3 고객별 평균 주문 금액을 백원 단위로 반올림한 값을 구하시오
      SELECT CUSTID, ROUND(SUM(SALEPRICE)/COUNT(*),-2) "평균금액"
      FROM ORDERS
      GROUP BY CUSTID
  
  2)문자함수 - P 215
    CONCAT(S1,S2) : 두 문자열을 연결
    LOWER(S) : 대문자를 소문자로
    UPPER(S) : 소문자를 대문자로
    LPAD(S,N,C) : 대상 문자열의 왼쪽부터 지정한 자리수까지 지정한 문자로 채움
    RPAD(S,N,C) : 대상 문자열의 오른쪽부터 지정한 자리수까지 지정한 문자로 채움
    REPLACE(S1,S2,S3) : 대상 문자열의 지정한 문자를 원하는 문자로 변경
    SUBSTR(S,N,C) : 대상 문자열의 지정된 자리에서부터 지정된 길이만큼 잘라서 반환
        SELECT     SUBSTR(NAME, 1, 1) 성씨, count(*) 인원수
        FROM    CUSTOMEr
        GROUP BY SUBSTR(name, 1, 1);
    TRIM(C FRIN S) : 대상 문자열의 양쪽에서 지정된 문자를 삭제

    ASCII(C): 문자의 아스키 코드
    LENGTH(S): 대상 문자열의 BYTE 반환. 알파벳은 1BYTE, 한글은 3BYTE.
    CHAR_LENGTH(S) : 문자열의 길이

    4-4 도서제목에 야구가 포함된 도서를 농구로 변경한 후 도서목록을 보이시오
      Select bookid,REPLACE(bookname,"야구","농구")bookname,publisher,price
      From book;

    4-6 마당서점의 고객 중에서 같은 성을 가진 사람이 몇명이나 되는지 성별 인원수를 구하시오.
      SELECT SUBSTR(NAME,1,1) '성', COUNT(*)'인원'
      FROM Customer
      Group By SUBSTR(name,1,1);
  
  3)날짜, 시간 함수 - P 218
    STR_TO_DATE -> 문자열(VARCHAR,CHAR) -> 날짜(DATE)
      문자열 데이터를 날짜형으로 반환
    
    DATE_FORMAT -> 날짜(DATE,DATETIME) -> 문자열(특정 포멧으로)
      날짜형 데이터를 문자열로 반환
      2021-09-16 -> 2021/09/16
    
    ADDDATE(date,interval) : 날짜에 지정된 기간만큼 더하거나 뺄때 
      interval 10 day -> date 보다 10일 뒤
      interval -10 day -> date 보다 10일 앞
   
    DATE(date) -> DATETIME(날짜 시간) -> DATE(날짜 + 시간 -> 날짜)
      SELECT 
        DATE(SYSDATE()) '현재날짜',
        DATE(ADDDATE(SYSDATE(), INTERVAL - 10 DAY)) '10일 전',
        DATE(ADDDATE(SYSDATE(), INTERVAL 10 DAY)) '10일 후';

    DATEDIFF(date1,date2) -> date1 ,date2 의 날짜 간격
    SYSDATE() -> DBMS 시스템 현재 날짜시간
    NOW

    format 주요 지정자 - P 219
    %Y -> 년도 (2021)
    %y -> 년도(21)
    %m -> 09월
    %d -> 16일

    %H -> 24시 기준 시간
    %h -> 12시 기준 시간
    %i -> 분
    %s -> 초

    %w -> 요일(0~6)

    P218
      select date_format(orderdate, '%y.%m.%d') orderdate
      from orders;

    P221
    NULL -  값이 입력되지 않은 형태
         -> 빈값, 0 둘다 아님.
         -> 속성 = NULL (X - 비교연산)
         -> IS NULL -> NULL 인경우
         -> IS NOT NULL -> NULL 이 아닌 경우

         NULL -> 연산 불가
         SUM,AVG -> NULL
         COUNT() -> 0

    P223
    IFNULL 

    변수
    SET @변수명: =값; 

    4-3. 
      1) 고객별 평균 주문 금액
        Orders - Group By custid
        AVG
    4.4

2. 부속질의
  하나의 SQL 문 안에 다른 SQL 문이 중첩된 질의

  1) 스칼라 부속질의 - SELECT 절
    UPDATE 테이블명
      SET
        속성 =  값

    스칼라 -> 단일값 (P226)
    4-12. 고객별 판매액(고객이름, 고객 판매액)
      GROUP BY custid
      1) 고객별 판매액
      2) 고객 이름

    4-13. Orders -> bname(VARCHAR(40)) -> 주문한 책 이름
          Orders - bookid -> Bool, bookname
  
  2) 인라인뷰 - FROM 절 - 가상의 뷰(테이블)
    4-14. 고객번호가 2 이하인 고객의 판매액
          (고객이름과 고객별 판매액)

  3) 중첩질의 - WHERE 절 - 상관부속질의, 비상관 부속질의
  230, 표 4-7 All -> 최대값, SOME(ANY) -> 최소값
  4-15, 4-16
  
  IN(교집합), NOT IN(차집합) -> 다중 값
  4-17. 대한민국 거주 고객, 판매한 도서의 총 판매액
    (Customer.address)

3. 뷰
  Customer,Orders,Book
  1) 편의성 및 재활용성
  2) 보안성

  뷰 수정
  create or REPLACE

4. 인덱스 (색인-목차)
  자료를 쉽고 빠르게 찾을수 있도록 만든 데이터 구조
  원하는 데이터를 빨리 찾기 위해 투플의 키 값에 대한 물리적 위치를 기록해둔 자료구조
  루트노드,내부노드,

  4-24
  Create UNIQUE|Index 인덱스이름 on 테이블명(속성 [ASC|DESC],속성 ...)


P 255 요약

  01. 내장함수
    사용자 정의 함수 - 프로시저, 트리거, 사용자 정의함수

  02. 부속질의
    - 하나의 SQL 안에 다른 SQL 문이 중첩된 질의    
    
    1. 스칼라 부속 질의
      (SELECT ..... , UPDATE SET)
      -> 스칼라 -> 단일 값

      4-12. 마당 서점의 고객별 판매액을 보이시오 ( 고객 이름과 고객별 판매액 출력)
        SELECT
	        (SELECT NAME FROM customer C WHERE C.CUSTID = O.CUSTID) 고객명,
	        SUM(SALEPRICE) 판매액
        FROM ORDERS O
        GROUP by CUSTID;

      4-13 Orders 테이블에 각 주문에 맞는 도서이름을 입력하시오.
        update orders o
	      set bname = (select bookname from book b where o.bookid = b.bookid )

    2.인라인 뷰
      (FROM ..... -> 가상의 뷰)

      4-14 고객번호가 2 이하인 고객의 판매액을 보이시오 ( 고객이름과 고객별 판매액 출력)
            SELECT 
                c.name, SUM(saleprice)
            FROM
                (SELECT 
                    custid, name
                FROM
                    customer
                WHERE
                    custid <= 2) c,
                orders o
            WHERE
                c.custid = o.custid
            GROUP BY o.custid

    3. 중첩질의
      (WHERE -> 상관 부속질의, 비상관 부속질의)
        단일 -> 비교조건
        =,<,>
        복수 -> 집합연산(IN, NOT IN)
             - IN(교집합), NOT IN(차집합)
               UNION(합집합) + UNION ALL(합집합 -> 중복 허용)
      
      4-15 평균 주문금액 이하의 주문에 대해서 주문벊와 금액을 보이시오.
        SELECT 
            orderid, saleprice
        FROM
            Orders
        WHERE
            saleprice <= (SELECT AVG(saleprice) FROM Orders);

      4-17 대한민국에 거주하는 고객에게 판매한 도서의 총 판매액을 구하시오.
            SELECT 
                SUM(saleprice) '총 판매액'
            FROM
                orders
            WHERE
                custid IN 
                (SELECT  custid
                  FROM   customer
                  WHERE  address LIKE '%대한민국%')
      ALL -> 최대값
      SOME(ANY) -> 최소값

      4-18 3번 고객이 주문한 도서의 최고 금액보다 더 비싼 도서를 구입한 주문의 주문번호와 판매 금액을 보이시오.
            SELECT 
                orderid, saleprice
            FROM
                orders
            WHERE
                saleprice > ALL (SELECT saleprice
                                  FROM  orders
                                  WHERE custid = 3)     

      EXISTS, NOT EXISTS       

      4-19 EXISTS 연산자를 사용하여 대한민국에 거주하는 고객에게 판매한 도서의 총 판매액을 구하시오.
        SELECT 
            SUM(saleprice) '총 판매액'
        FROM
            orders o
        WHERE
            EXISTS
            ( SELECT *
                FROM customer c
                WHERE o.custid = c.custid 
                        AND address LIKE '%대한민국%')

  03. 뷰
    view의 장점

      - 편의성및 재사용성: 미리 정의된 뷰를 일반 테이블처럼 사용 할 수 있다.또 자주 사용되는 질의를 뷰로 미리 정의해 재사용 할수 있다.
      - 보안성: 각 사용자 별로 필요한 데이터만 선별하여 보여줄 수 있다.
      - 독립성: 테이블 구조가 변경되어도 뷰를 사용하는 응용프로그램에는 영향을 주지 않는다.

    view의 단점

      - SELECT문을 제외한 일부 물리적인 테이블의 갱신 작업을 수행하는데 제약이 있다. DML 작업은 수행되지 않는 경우도 있다.

    뷰의 생성및 수정
    CREATE OR REPLACE VIEW 뷰이름
    AS SELECT 문

    4-21 Order 테이블에서 고객이름과 도서이름을 바로 확인할수 있는뷰를 생성한 후, 
          '김연아'고객이 구입한 주문번호,도서이름,주문액을 보이시오
            
            CREATE OR REPLACE VIEW vw_Orders AS
              SELECT 
                  o.orderid, b.bookid, c.name, o.saleprice
              FROM
                  Orders o,
                  Customer c,
                  Book b
              WHERE
                  o.custid = c.custid
                      AND o.bookid = b.bookid;


    4-22 주소가 대한민국인 고객을 보여주는 뷰를, 영국을 주소로 가진 고객으로 변경하시오.

        CREATE OR REPLACE VIEW vw_Customer AS
          SELECT 
              custid, name, address
          FROM
              customer
          WHERE
              address LIKE '%영국%'

    4-23 앞서 생성한 vw_Customer를 삭제하시오
        Drop view vw_Customer;
    
  04. 인덱스
    목차, 색인: 원하는 정보를 빨리 찾기 위해.
    인덱스 생성시 고려사항
      - 인덱스는 where 절에 자주 사용되는 속성이어야 한다.
      - 인덱스는 조인에 자주 사용되는 속성이어야 한다.
      - 속성의 선택도가 낮을때 유리하다. (속성의 모든 값이 다른 경우)

    4-24 인덱스의 생성
    4-25 Book 테이블의 publisher,price 열을 대상으로 ix_book2를 생성하시오.
      CREATE INDEX ix_book2 on book (publisher, price );

      show index from book; (생성된 인덱스 확인)

      drop index ix_book on book (인덱스 삭제)
  

